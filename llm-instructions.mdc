---
description: 
globs: 
alwaysApply: false
---
## UnicornPoep Project LLM Instructions

These instructions will help you understand the structure, patterns, and conventions of the UnicornPoep project codebase.

**1. Core Architecture & Design Patterns:**

*   **Central Orchestrator:** The `Game` class (`game.js`) acts as the central hub, managing game state, transitions between modes (main menu, practice, test, multiplayer), and coordinating interactions between different controllers and managers.
*   **Controller Pattern:** The UI is divided into logical sections, each managed by a dedicated controller class (e.g., `MainMenuController`, `GameAreaController`, `DialogController`, `MultiplayerController`, `HighscoresController`, `CustomQuestionsController`, `AboutController`, `LoadingController`).
    *   Controllers are responsible for handling user interactions within their specific UI section (button clicks, input changes).
    *   They interact with the main `Game` instance to trigger state changes or actions.
*   **UI Visibility:** The primary pattern for showing/hiding major UI sections (like `#mainMenu`, `#gameArea`, `#multiplayerChoice`, `#sheetSelection`, etc.) is toggling the `.hidden` CSS class (`display: none !important;`) on their container elements. Controller methods like `show()` (removes `.hidden`) and `hide()` (adds `.hidden`) manage this state. Assume elements have a base `display` style (e.g., `flex`, `block`) that becomes active when `.hidden` is removed.
    *   **Hierarchy Dependency:** Crucially, an element will *not* be visible if any of its parent containers still have the `.hidden` class, even if the element's own `.hidden` class is removed. When showing a sub-section (like `#sheetSelection`), ensure its parent container (like `#mainMenu`) is also visible (e.g., by calling the parent controller's `show()` method if needed).
    *   **Exception:** Fixed-position bottom navigation bars (`#sheetNavigation`, `#gameNavigation`) use a different mechanism. They toggle an `.active` class that changes their `bottom` CSS property to slide them into view, rather than using the `.hidden` class.
    *   **Dialogs:** Modal dialogs (`<dialog>` elements managed by `DialogController`) use their native `.showModal()` and `.close()` methods, not the `.hidden` class pattern.
*   **Manager Pattern:** Data handling and external interactions are encapsulated in manager classes:
    *   `QuestionsManager`: Loads, parses, caches, and manages access to predefined and custom questions (stored in `localStorage`).

**2. Code Standards & Conventions:**

 *   **Language:** Modern JavaScript (ES6+). Use `class` syntax for structuring components.
 *   **Asynchronous Operations:** Use `async`/`await` for Promises, especially for operations like loading data (`fetch`), saving/loading scores, and potentially some WebRTC interactions.
 *   **Docblocks:** Functions and classes generally have JSDoc-style comments explaining their purpose and parameters (`@param`, `@returns`). Maintain this style.
 *   **Naming:** Use camelCase for variables and functions, PascalCase for class names.
 *   **DOM Manipulation:** Primarily uses `document.getElementById` and `querySelector`/`querySelectorAll` to get elements. Interactions often involve adding/removing classes (`.classList.add`/`.remove`) and setting `textContent` or `innerHTML`.
 *   **Error Handling:** Use `try...catch` blocks for operations that might fail (e.g., `localStorage` access, `fetch`, JSON parsing). Log errors to the console (`console.error`, `console.warn`). User-facing errors are often shown via `alert()` or specific UI elements managed by controllers (like `DialogController` or `MultiplayerController`).
 *   **Comments:** Avoid redundant comments. Focus on explaining non-obvious logic or reasoning. Preserve existing important comments (e.g., explaining edge cases).
 *   **UI Styling Consistency - HTML Structure:** When adding new UI elements (inputs, buttons, dialogs, etc.) that need to visually match existing ones, **inspect the exact HTML structure** of the reference element in `index.html`. **Precisely replicate** this structure, including any **wrapper `<div>` elements and specific CSS classes** (like `.name-input-container`), not just top-level classes (like `.unicorn-theme` or `.hidden`). CSS styling rules often depend on this specific nesting and class hierarchy. Simply applying a general theme class or relying on element type selectors may not achieve the desired visual consistency.


**3. Data Storage:**

 *   **QuestionsManager:** Loads, parses, caches, and manages access to predefined and custom questions (stored in `localStorage`).
// ... existing code ... 